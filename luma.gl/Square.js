// making a sqaure 
import {AnimationLoop ,Program , VertexArray ,Buffer , setParameters} from 'luma.gl';
import { Matrix4} from 'math.gl';


//The Vertex Shader is the programmable Shader stage in
//the rendering pipeline that handles the processing of individual vertices.

const VERTEX_SHADER= '\
attribute vec3 positions;

uniform mat4 uMVMatrix;

void main(void) {
 gl_position = uPMatrix * uMVMatrix * vec4(positions, 1.0);
}
';

//A Fragment Shader is the Shader stage that will process a 
//Fragment generated by the Rasterization into a set of colors and a single depth value.

const FRAGMENT_SHADER = '\
precision highp float;

void main(void) {
  gl_FragColor = vec4(1.0,1.0,1.0,1.0);
}
';

const animationLoop = new AnimationLoop({
  debug: true ;
  onInitialize({gl , canvas , aspect}) {
    const SQUARE_VERTS = [ 1, 1, 0 , -1,1,0 , 1,-1,0, -1,-1,0];
    const programe = new Program (gl ,{
      vs : VERTEX_SHADER,
      fs : FRAGMENT_SHADER,
    });
   const squareVertexArray = new VertexArray(gl , {
      program,
      attributes: {
        positions: new Buffer(gl, new Float32Array(SQUARE_VERTS))
      }
    });
    
    const view = new Matrix4().translate([-1.5, 0, -7]);
    const projection = new Matrix4().perspective({aspect});
    
    setParameters(gl, {
      clearColor: [0, 0, 0, 1],
      clearDepth: [1],
      depthTest: true,
      depthFunc: gl.LEQUAL
    });
//The COLOR_BUFFER_BIT constant indicates the buffers currently enabled for color writing.
//The DEPTH_BUFFER_BIT constant indicates the depth buffer.
     gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
     
     program.draw({
      vertexArray: squareVertexArray,
      uniforms: {
        uMVMatrix: view,
        uPMatrix: projection
      },
      drawMode: gl.TRIANGLE_STRIP,
      vertexCount: 4
    });
  }
});

animationLoop.getInfo = () => INFO_HTML;

export default animationLoop;

if (!window.website) {
  animationLoop.start();
 }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
